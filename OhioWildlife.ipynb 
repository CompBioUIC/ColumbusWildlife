{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Installation Requirements and Module Configuration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you would like to run in your own environment, the following dependencies are required"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Dependencies\n",
    "# !pip install azure-storage-blob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "#to reflect changes made in modules\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "##imports\n",
    "import pandas as pd\n",
    "import os, sys\n",
    "import json\n",
    "sys.path.append(os.path.join(sys.path[0], '../'))\n",
    "\n",
    "from columbus_wildlife_workshop import Flickr\n",
    "fr = Flickr() \n",
    "\n",
    "from image_data import Save\n",
    "s = Save()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Query Terms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feel free to play around and modify the query term to see how your results differ :)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [],
   "source": [
    "term = 'Columbus AND Ohio AND wildlife AND NOT zoo AND NOT domestic'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Flickr API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connect to Flickr photos search api \n",
    "API will retrieve results for term selected and download them to a zip file specified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello!!\n",
      "<Response [200]>\n",
      "12 Found with Columbus+AND+Ohio+AND+wildlife+AND+NOT+zoo+AND+NOT+domestic\n",
      "Done Retrieving Flickr Results\n"
     ]
    }
   ],
   "source": [
    "json_res = fr.search(term, saveTo=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Download Images to A Folder\n",
    "In the same directory this notebook is in, create a folder \"images\".\n",
    "This folder will contain all jpg images from the Flickr API query"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save images to a folder specied. As we save images, we build a list of dictionaries representing the images.\n",
    "\n",
    "For each image, we construct a dictionary with:\n",
    "   - url: img url from flickr\n",
    "   - name: name of image\n",
    "   - data: bytearray representation of img "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://live.staticflickr.com/65535/50567923271_926d37d247_b.jpg\n"
     ]
    }
   ],
   "source": [
    "# Test out with a small portion of images\n",
    "subset = json_res[0][0:6]\n",
    "print(subset[0]['url_l'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done downloading images!\n"
     ]
    }
   ],
   "source": [
    "# For Species Classfier Images \n",
    "file_path = 'subset_classifier_images/'#\"classifier_images/\"\n",
    "list_images = s.download_images(file_path, subset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Species Classfication"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connect to Microsoft Azure SpeciesClassification API to generate predictions on species in frame using the photos collected from the Flickr API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: To run the following code, you'll need to request an API key for the Species Classification API\n",
    "For more info on doing so, visit\n",
    "https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/ai-for-earth "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "# get list of image dicts\n",
    "# FIXME: try and save this img_data to a json file so we dont\n",
    "# have to reload each time\n",
    "image_data = list_images\n",
    "print(type(image_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = img_data[0]['url']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "from columbus_wildlife_workshop import SpeciesClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50567923271_926d37d247_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Aves', 'class_common': 'Birds', 'confidence': 48.289334774017334, 'family': 'Alcedinidae', 'family_common': 'Kingfishers', 'genus': 'Megaceryle', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Coraciiformes', 'order_common': 'Kingfishers and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Megaceryle alcyon', 'species_common': 'Belted Kingfisher', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 23.83272796869278, 'family': 'Alcedinidae', 'family_common': 'Kingfishers', 'genus': 'Chloroceryle', 'genus_common': 'American Green Kingfishers', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Coraciiformes', 'order_common': 'Kingfishers and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Chloroceryle amazona', 'species_common': 'Amazon Kingfisher', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 15.387740731239319, 'family': 'Alcedinidae', 'family_common': 'Kingfishers', 'genus': 'Megaceryle', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Coraciiformes', 'order_common': 'Kingfishers and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Megaceryle torquata', 'species_common': 'Ringed Kingfisher', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 1.7697395756840706, 'family': 'Alcedinidae', 'family_common': 'Kingfishers', 'genus': 'Chloroceryle', 'genus_common': 'American Green Kingfishers', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Coraciiformes', 'order_common': 'Kingfishers and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Chloroceryle aenea', 'species_common': 'American Pygmy Kingfisher', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 1.2283433228731155, 'family': 'Alcedinidae', 'family_common': 'Kingfishers', 'genus': 'Chloroceryle', 'genus_common': 'American Green Kingfishers', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Coraciiformes', 'order_common': 'Kingfishers and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Chloroceryle americana', 'species_common': 'Green Kingfisher', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Megaceryle alcyon' target='_blank'>Megaceryle alcyon</a><span class='species-common'>  ( Belted Kingfisher ) </span><div class='progress progress-container'><div class='progress-bar' style='width:48.29%' ><span class='progress-text'>48.29%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Chloroceryle amazona' target='_blank'>Chloroceryle amazona</a><span class='species-common'>  ( Amazon Kingfisher ) </span><div class='progress progress-container'><div class='progress-bar' style='width:23.83%' ><span class='progress-text'>23.83%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Megaceryle torquata' target='_blank'>Megaceryle torquata</a><span class='species-common'>  ( Ringed Kingfisher ) </span><div class='progress progress-container'><div class='progress-bar' style='width:15.39%' ><span class='progress-text'>15.39%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Chloroceryle aenea' target='_blank'>Chloroceryle aenea</a><span class='species-common'>  ( American Pygmy Kingfisher ) </span><div class='progress progress-container'><div class='progress-bar' style='width:1.77%' ><span class='progress-text'>1.77%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Chloroceryle americana' target='_blank'>Chloroceryle americana</a><span class='species-common'>  ( Green Kingfisher ) </span><div class='progress progress-container'><div class='progress-bar' style='width:1.23%' ><span class='progress-text'>1.23%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561598837_04ed2168d8_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 11.987053602933884, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus virginianus', 'species_common': 'White tailed Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 10.599566996097565, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus virginianus clavium', 'species_common': 'Key Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 9.096885472536087, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus columbianus', 'species_common': 'Columbian Black tailed Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 8.383452147245407, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Cervus', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Cervus elaphus', 'species_common': 'Red Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 5.6644342839717865, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus', 'species_common': 'Mule Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus virginianus' target='_blank'>Odocoileus virginianus</a><span class='species-common'>  ( White tailed Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:11.99%' ><span class='progress-text'>11.99%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus virginianus clavium' target='_blank'>Odocoileus virginianus clavium</a><span class='species-common'>  ( Key Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:10.6%' ><span class='progress-text'>10.6%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus columbianus' target='_blank'>Odocoileus hemionus columbianus</a><span class='species-common'>  ( Columbian Black tailed Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:9.1%' ><span class='progress-text'>9.1%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Cervus elaphus' target='_blank'>Cervus elaphus</a><span class='species-common'>  ( Red Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:8.38%' ><span class='progress-text'>8.38%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus' target='_blank'>Odocoileus hemionus</a><span class='species-common'>  ( Mule Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:5.66%' ><span class='progress-text'>5.66%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561597437_b02dc4f1e4_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 13.054774701595306, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus columbianus', 'species_common': 'Columbian Black tailed Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 12.56299614906311, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus', 'species_common': 'Mule Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 5.561569333076477, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus californicus', 'species_common': 'California Mule Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 5.3228892385959625, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus hemionus', 'species_common': 'Rocky Mountain Mule Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 4.59739975631237, 'family': 'Suidae', 'family_common': 'Swines', 'genus': 'Sus', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Sus scrofa', 'species_common': 'Wild Boar', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus columbianus' target='_blank'>Odocoileus hemionus columbianus</a><span class='species-common'>  ( Columbian Black tailed Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:13.05%' ><span class='progress-text'>13.05%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus' target='_blank'>Odocoileus hemionus</a><span class='species-common'>  ( Mule Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:12.56%' ><span class='progress-text'>12.56%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus californicus' target='_blank'>Odocoileus hemionus californicus</a><span class='species-common'>  ( California Mule Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:5.56%' ><span class='progress-text'>5.56%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus hemionus' target='_blank'>Odocoileus hemionus hemionus</a><span class='species-common'>  ( Rocky Mountain Mule Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:5.32%' ><span class='progress-text'>5.32%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Sus scrofa' target='_blank'>Sus scrofa</a><span class='species-common'>  ( Wild Boar ) </span><div class='progress progress-container'><div class='progress-bar' style='width:4.6%' ><span class='progress-text'>4.6%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561468316_74b9d94115_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 30.397072434425354, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus columbianus', 'species_common': 'Columbian Black tailed Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 11.539672315120697, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus virginianus', 'species_common': 'White tailed Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 11.176756769418716, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Odocoileus', 'genus_common': 'White tailed and Mule Deer', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Odocoileus hemionus', 'species_common': 'Mule Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Mammalia', 'class_common': 'Mammals', 'confidence': 11.162222921848297, 'family': 'Cervidae', 'family_common': 'Deer', 'genus': 'Cervus', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Artiodactyla', 'order_common': 'Even toed Ungulates', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Cervus elaphus', 'species_common': 'Red Deer', 'suborder': 'Ruminantia', 'suborder_common': 'Ruminants', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'confidence': 5.944523215293884, 'species': 'Cervus elaphus roosevelti', 'species_common': 'roosevelt elk'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus columbianus' target='_blank'>Odocoileus hemionus columbianus</a><span class='species-common'>  ( Columbian Black tailed Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:30.4%' ><span class='progress-text'>30.4%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus virginianus' target='_blank'>Odocoileus virginianus</a><span class='species-common'>  ( White tailed Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:11.54%' ><span class='progress-text'>11.54%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Odocoileus hemionus' target='_blank'>Odocoileus hemionus</a><span class='species-common'>  ( Mule Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:11.18%' ><span class='progress-text'>11.18%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Cervus elaphus' target='_blank'>Cervus elaphus</a><span class='species-common'>  ( Red Deer ) </span><div class='progress progress-container'><div class='progress-bar' style='width:11.16%' ><span class='progress-text'>11.16%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Cervus elaphus roosevelti' target='_blank'>Cervus elaphus roosevelti</a><span class='species-common'>  ( roosevelt elk ) </span><div class='progress progress-container'><div class='progress-bar' style='width:5.94%' ><span class='progress-text'>5.94%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50553140586_a04857b1e0_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Aves', 'class_common': 'Birds', 'confidence': 19.664740562438965, 'family': 'Ardeidae', 'family_common': 'Herons, Egrets, and Bitterns', 'genus': 'Egretta', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Pelecaniformes', 'order_common': 'Pelicans, Herons, Ibises, and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Egretta garzetta', 'species_common': 'Little Egret', 'subfamily': 'Ardeinae', 'subfamily_common': '', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 15.311738848686218, 'family': 'Ardeidae', 'family_common': 'Herons, Egrets, and Bitterns', 'genus': 'Ardea', 'genus_common': 'Great Herons', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Pelecaniformes', 'order_common': 'Pelicans, Herons, Ibises, and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Ardea herodias', 'species_common': 'Great Blue Heron', 'subfamily': 'Ardeinae', 'subfamily_common': '', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 14.41868245601654, 'family': 'Ardeidae', 'family_common': 'Herons, Egrets, and Bitterns', 'genus': 'Egretta', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Pelecaniformes', 'order_common': 'Pelicans, Herons, Ibises, and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Egretta caerulea', 'species_common': 'Little Blue Heron', 'subfamily': 'Ardeinae', 'subfamily_common': '', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 10.413464158773422, 'family': 'Ardeidae', 'family_common': 'Herons, Egrets, and Bitterns', 'genus': 'Egretta', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Pelecaniformes', 'order_common': 'Pelicans, Herons, Ibises, and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Egretta thula', 'species_common': 'Snowy Egret', 'subfamily': 'Ardeinae', 'subfamily_common': '', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 8.332090079784393, 'family': 'Ardeidae', 'family_common': 'Herons, Egrets, and Bitterns', 'genus': 'Egretta', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Pelecaniformes', 'order_common': 'Pelicans, Herons, Ibises, and Allies', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Egretta tricolor', 'species_common': 'Tricolored Heron', 'subfamily': 'Ardeinae', 'subfamily_common': '', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Egretta garzetta' target='_blank'>Egretta garzetta</a><span class='species-common'>  ( Little Egret ) </span><div class='progress progress-container'><div class='progress-bar' style='width:19.66%' ><span class='progress-text'>19.66%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Ardea herodias' target='_blank'>Ardea herodias</a><span class='species-common'>  ( Great Blue Heron ) </span><div class='progress progress-container'><div class='progress-bar' style='width:15.31%' ><span class='progress-text'>15.31%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Egretta caerulea' target='_blank'>Egretta caerulea</a><span class='species-common'>  ( Little Blue Heron ) </span><div class='progress progress-container'><div class='progress-bar' style='width:14.42%' ><span class='progress-text'>14.42%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Egretta thula' target='_blank'>Egretta thula</a><span class='species-common'>  ( Snowy Egret ) </span><div class='progress progress-container'><div class='progress-bar' style='width:10.41%' ><span class='progress-text'>10.41%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Egretta tricolor' target='_blank'>Egretta tricolor</a><span class='species-common'>  ( Tricolored Heron ) </span><div class='progress progress-container'><div class='progress-bar' style='width:8.33%' ><span class='progress-text'>8.33%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50543914708_e597b1c4d4_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "result:  ({'predictions': [{'class': 'Aves', 'class_common': 'Birds', 'confidence': 95.41850090026855, 'family': 'Cardinalidae', 'family_common': 'Cardinals and Allies', 'genus': 'Cardinalis', 'genus_common': 'Typical Cardinals', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Passeriformes', 'order_common': 'Perching Birds', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Cardinalis cardinalis', 'species_common': 'Northern Cardinal', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 3.2150261104106903, 'family': 'Cardinalidae', 'family_common': 'Cardinals and Allies', 'genus': 'Cardinalis', 'genus_common': 'Typical Cardinals', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Passeriformes', 'order_common': 'Perching Birds', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Cardinalis sinuatus', 'species_common': 'Pyrrhuloxia', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 0.03369880432728678, 'family': 'Icteridae', 'family_common': 'New World Blackbirds and Orioles', 'genus': 'Icterus', 'genus_common': 'New World Orioles', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Passeriformes', 'order_common': 'Perching Birds', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Icterus gularis', 'species_common': 'Altamira Oriole', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 0.032280245795845985, 'family': 'Thraupidae', 'family_common': 'Tanagers and Allies', 'genus': 'Paroaria', 'genus_common': 'Red headed Cardinals', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Passeriformes', 'order_common': 'Perching Birds', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Paroaria coronata', 'species_common': 'Red crested Cardinal', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}, {'class': 'Aves', 'class_common': 'Birds', 'confidence': 0.01819162571337074, 'family': 'Parulidae', 'family_common': 'New World Warblers', 'genus': 'Cardellina', 'genus_common': '', 'kingdom': 'Animalia', 'kingdom_common': 'Animals', 'order': 'Passeriformes', 'order_common': 'Perching Birds', 'phylum': 'Chordata', 'phylum_common': 'Chordates', 'species': 'Cardellina rubra', 'species_common': 'Red Warbler', 'subphylum': 'Vertebrata', 'subphylum_common': 'Vertebrates'}]}, False)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>.progress-container {margin:0 auto; min-height: 25px;margin:0;width:100%; margin-top:10px}.progress-bar{background-color:#ffc107; padding:3px}.progress-text{color:black; margin-top:5px;} .species .species-common { color:black !important; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:14px;line-height:20px;}</style><a style='color:black;' class='species' href='https://bing.com/images/search?q=Cardinalis cardinalis' target='_blank'>Cardinalis cardinalis</a><span class='species-common'>  ( Northern Cardinal ) </span><div class='progress progress-container'><div class='progress-bar' style='width:95.42%' ><span class='progress-text'>95.42%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Cardinalis sinuatus' target='_blank'>Cardinalis sinuatus</a><span class='species-common'>  ( Pyrrhuloxia ) </span><div class='progress progress-container'><div class='progress-bar' style='width:3.22%' ><span class='progress-text'>3.22%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Icterus gularis' target='_blank'>Icterus gularis</a><span class='species-common'>  ( Altamira Oriole ) </span><div class='progress progress-container'><div class='progress-bar' style='width:0.03%' ><span class='progress-text'>0.03%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Paroaria coronata' target='_blank'>Paroaria coronata</a><span class='species-common'>  ( Red crested Cardinal ) </span><div class='progress progress-container'><div class='progress-bar' style='width:0.03%' ><span class='progress-text'>0.03%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<a style='color:black;' class='species' href='https://bing.com/images/search?q=Cardellina rubra' target='_blank'>Cardellina rubra</a><span class='species-common'>  ( Red Warbler ) </span><div class='progress progress-container'><div class='progress-bar' style='width:0.02%' ><span class='progress-text'>0.02%</span></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cs = SpeciesClassifier()\n",
    "for image in image_data:\n",
    "    cs.classify_and_display_results(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ground Truths of Species for All Images Collected"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we manually filter our images and assign their true species from what we (the people) see.\n",
    "We then build a dataframe that holds:\n",
    "- img name\n",
    "- species prediction (we store the most confident one, which is the first item in 'predictions' return value\n",
    "- true species"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running API...\n",
      "...done\n",
      "Running API...\n",
      "...done\n",
      "Running API...\n",
      "...done\n",
      "Running API...\n",
      "...done\n",
      "Running API...\n",
      "...done\n",
      "Running API...\n",
      "...done\n"
     ]
    }
   ],
   "source": [
    "predictions = []\n",
    "json_predictions = {} \n",
    "image_data_json = {}\n",
    "for image in image_data:\n",
    "    result = cs.get_api_response(image['data'])\n",
    "    pred = {'image': image['name'],\n",
    "            'image_url': image['url'],\n",
    "            'species_prediction': result[0]['predictions'][0]['species_common'],\n",
    "            'true_species': None,\n",
    "            'native_to_ohio': None\n",
    "           }\n",
    "    predictions.append(pred)\n",
    "    \n",
    "    #to use in saving prediction result return by get_api_response() to json file\n",
    "    #each result returned by get_api_response is a tuple so unpack accordingly\n",
    "    json_predictions[image['url']] = result[0]\n",
    "    \n",
    "    #to use in saving each built image document to a json file as well\n",
    "    image_data_json[image['name']] = pred "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'image-1.jpg': {'image': 'image-1.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50567923271_926d37d247_b.jpg',\n",
       "  'species_prediction': 'Belted Kingfisher',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None},\n",
       " 'image-2.jpg': {'image': 'image-2.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50561598837_04ed2168d8_b.jpg',\n",
       "  'species_prediction': 'White tailed Deer',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None},\n",
       " 'image-3.jpg': {'image': 'image-3.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50561597437_b02dc4f1e4_b.jpg',\n",
       "  'species_prediction': 'Columbian Black tailed Deer',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None},\n",
       " 'image-4.jpg': {'image': 'image-4.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50561468316_74b9d94115_b.jpg',\n",
       "  'species_prediction': 'Columbian Black tailed Deer',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None},\n",
       " 'image-5.jpg': {'image': 'image-5.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50553140586_a04857b1e0_b.jpg',\n",
       "  'species_prediction': 'Little Egret',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None},\n",
       " 'image-6.jpg': {'image': 'image-6.jpg',\n",
       "  'image_url': 'https://live.staticflickr.com/65535/50543914708_e597b1c4d4_b.jpg',\n",
       "  'species_prediction': 'Northern Cardinal',\n",
       "  'true_species': None,\n",
       "  'native_to_ohio': None}}"
      ]
     },
     "execution_count": 284,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## sanity checks\n",
    "# json_predictions\n",
    "image_data_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save all json results to json file\n",
    "json_object = json.dumps(json_predictions, indent = 4) \n",
    "  \n",
    "# Writing to sample_flickr_results.json \n",
    "with open(\"sample_flickr_results.json\", \"w\") as outfile: \n",
    "    outfile.write(json_object) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save all image_data docs to json file\n",
    "json_object = json.dumps(image_data_json, indent = 4) \n",
    "  \n",
    "# Writing to sample_flickr_results.json \n",
    "with open(\"sample_image_data.json\", \"w\") as outfile: \n",
    "    outfile.write(json_object) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>image_url</th>\n",
       "      <th>species_prediction</th>\n",
       "      <th>true_species</th>\n",
       "      <th>native_to_ohio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>image-1.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056792327...</td>\n",
       "      <td>Belted Kingfisher</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>image-2.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056159883...</td>\n",
       "      <td>White tailed Deer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>image-3.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056159743...</td>\n",
       "      <td>Columbian Black tailed Deer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>image-4.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056146831...</td>\n",
       "      <td>Columbian Black tailed Deer</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>image-5.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5055314058...</td>\n",
       "      <td>Little Egret</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>image-6.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5054391470...</td>\n",
       "      <td>Northern Cardinal</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         image                                          image_url  \\\n",
       "0  image-1.jpg  https://live.staticflickr.com/65535/5056792327...   \n",
       "1  image-2.jpg  https://live.staticflickr.com/65535/5056159883...   \n",
       "2  image-3.jpg  https://live.staticflickr.com/65535/5056159743...   \n",
       "3  image-4.jpg  https://live.staticflickr.com/65535/5056146831...   \n",
       "4  image-5.jpg  https://live.staticflickr.com/65535/5055314058...   \n",
       "5  image-6.jpg  https://live.staticflickr.com/65535/5054391470...   \n",
       "\n",
       "            species_prediction true_species native_to_ohio  \n",
       "0            Belted Kingfisher         None           None  \n",
       "1            White tailed Deer         None           None  \n",
       "2  Columbian Black tailed Deer         None           None  \n",
       "3  Columbian Black tailed Deer         None           None  \n",
       "4                 Little Egret         None           None  \n",
       "5            Northern Cardinal         None           None  "
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(predictions)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Manually Filter Images\n",
    "Process: \n",
    "- Go through each image, and to make the process faster, print the species_prediction and double check\n",
    "  with a quick web_search\n",
    "- Insert true_species value to dataframe directly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50567923271_926d37d247_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  Belted Kingfisher\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561598837_04ed2168d8_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  White tailed Deer\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561597437_b02dc4f1e4_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  Columbian Black tailed Deer\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The predicted species is incorrect. Please specify the correct species: \n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " test_for_cf_matrix\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50561468316_74b9d94115_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  Columbian Black tailed Deer\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50553140586_a04857b1e0_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  Little Egret\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>div.output_subarea{overflow-x:hidden !important}.container{margin:0 auto}.single_image{width:50%} </style><div class='container'><div class='image_container'><img class='single_image' src='https://live.staticflickr.com/65535/50543914708_e597b1c4d4_b.jpg'/></div></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Species Predicted In Image:  Northern Cardinal\n",
      "Is the species prediction correct? (y/n): "
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " y\n"
     ]
    }
   ],
   "source": [
    "#iterate through each row in df to get ground truths\n",
    "for index, row in df.iterrows():\n",
    "    true_species = cs.get_ground_truth(row['image_url'], row['species_prediction'])\n",
    "    df.iloc[index]['true_species'] = true_species\n",
    "    \n",
    "    # add in if true_species is in list of wildlife native to ohio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>image</th>\n",
       "      <th>image_url</th>\n",
       "      <th>species_prediction</th>\n",
       "      <th>true_species</th>\n",
       "      <th>native_to_ohio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>image-1.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056792327...</td>\n",
       "      <td>Belted Kingfisher</td>\n",
       "      <td>Belted Kingfisher</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>image-2.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056159883...</td>\n",
       "      <td>White tailed Deer</td>\n",
       "      <td>White tailed Deer</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>image-3.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056159743...</td>\n",
       "      <td>Columbian Black tailed Deer</td>\n",
       "      <td>test_for_cf_matrix</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>image-4.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5056146831...</td>\n",
       "      <td>Columbian Black tailed Deer</td>\n",
       "      <td>Columbian Black tailed Deer</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>image-5.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5055314058...</td>\n",
       "      <td>Little Egret</td>\n",
       "      <td>Little Egret</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>image-6.jpg</td>\n",
       "      <td>https://live.staticflickr.com/65535/5054391470...</td>\n",
       "      <td>Northern Cardinal</td>\n",
       "      <td>Northern Cardinal</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         image                                          image_url  \\\n",
       "0  image-1.jpg  https://live.staticflickr.com/65535/5056792327...   \n",
       "1  image-2.jpg  https://live.staticflickr.com/65535/5056159883...   \n",
       "2  image-3.jpg  https://live.staticflickr.com/65535/5056159743...   \n",
       "3  image-4.jpg  https://live.staticflickr.com/65535/5056146831...   \n",
       "4  image-5.jpg  https://live.staticflickr.com/65535/5055314058...   \n",
       "5  image-6.jpg  https://live.staticflickr.com/65535/5054391470...   \n",
       "\n",
       "            species_prediction                 true_species native_to_ohio  \n",
       "0            Belted Kingfisher            Belted Kingfisher           None  \n",
       "1            White tailed Deer            White tailed Deer           None  \n",
       "2  Columbian Black tailed Deer           test_for_cf_matrix           None  \n",
       "3  Columbian Black tailed Deer  Columbian Black tailed Deer           None  \n",
       "4                 Little Egret                 Little Egret           None  \n",
       "5            Northern Cardinal            Northern Cardinal           None  "
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df #dataframe after manual filtration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save dataframe with manual filtration results and species prediction to a csv file\n",
    "compression_opts = dict(method='zip',\n",
    "                        archive_name='classifier_results.csv')  \n",
    "df.to_csv('classifier_results.zip', index=False,\n",
    "          compression=compression_opts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing Our Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we'll take a look at how well the species classifier predicted the species in our Flickr Image Data\n",
    "- analyze the different species we detected and their frequencies (correctly identified species) (histogram)\n",
    "- analyze the predicted class and actual classes via a confusion matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1, 0, 0, 0, 0, 0],\n",
       "       [0, 1, 0, 0, 0, 0],\n",
       "       [0, 0, 1, 0, 0, 0],\n",
       "       [0, 0, 0, 1, 0, 0],\n",
       "       [0, 0, 0, 0, 1, 0],\n",
       "       [0, 1, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "cf = confusion_matrix(df.true_species, df.species_prediction)\n",
    "cf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# display confusion matrix without the classifier\n",
    "disp = ConfusionMatrixDisplay(cf, display_labels = df.species_prediction)\n",
    "disp = disp.plot()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['GTK3Agg', 'GTK3Cairo', 'MacOSX', 'nbAgg', 'Qt4Agg', 'Qt4Cairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg', 'WXCairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'/Users/mramir71/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrc'"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Note: if confusion matrix plot does not show up, reference:\n",
    "# https://stackoverflow.com/questions/7534453/matplotlib-does-not-show-my-drawings-although-i-call-pyplot-show\n",
    "\n",
    "# To get plot to show up, you will have to find the matplotlibrc\n",
    "# file and edit the backend setting\n",
    "\n",
    "# The following code is helpful in locating where matplotlibrc\n",
    "# file is located, but you must find the file yourself and set:\n",
    "# 'backup: GtkAgg' \n",
    "import matplotlib.rcsetup as rcsetup\n",
    "print(rcsetup.all_backends)\n",
    "\n",
    "import matplotlib\n",
    "matplotlib.matplotlib_fname()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
